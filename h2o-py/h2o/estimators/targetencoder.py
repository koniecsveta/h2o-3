#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py
# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)
#
from __future__ import absolute_import, division, print_function, unicode_literals

from h2o.estimators.estimator_base import H2OEstimator
from h2o.exceptions import H2OValueError
from h2o.frame import H2OFrame
from h2o.utils.typechecks import assert_is_type, Enum, numeric


class H2OTargetencoderEstimator(H2OEstimator):
    """
    TargetEncoder

    """

    algo = "targetencoder"

    def __init__(self, **kwargs):
        super(H2OTargetencoderEstimator, self).__init__()
        self._parms = {}
        names_list = {"blending", "encoded_columns", "fold_column", "target_column", "blending_parameters", "model_id"}
        if "Lambda" in kwargs: kwargs["lambda_"] = kwargs.pop("Lambda")
        for pname, pvalue in kwargs.items():
            if pname == 'model_id':
                self._id = pvalue
                self._parms["model_id"] = pvalue
            elif pname in names_list:
                # Using setattr(...) will invoke type-checking of the arguments
                setattr(self, pname, pvalue)
            else:
                raise H2OValueError("Unknown parameter %s = %r" % (pname, pvalue))

    @property
    def blending(self):
        """
        Is blending used ? True by default.

        Type: ``bool``  (default: ``False``).
        """
        return self._parms.get("blending")

    @blending.setter
    def blending(self, blending):
        assert_is_type(blending, None, bool)
        self._parms["blending"] = blending


    @property
    def encoded_columns(self):
        """
        Columnds to encode.

        Type: ``List[str]``.
        """
        return self._parms.get("encoded_columns")

    @encoded_columns.setter
    def encoded_columns(self, encoded_columns):
        assert_is_type(encoded_columns, None, [str])
        self._parms["encoded_columns"] = encoded_columns


    @property
    def fold_column(self):
        """
        Columnds to encode.

        Type: ``str``.
        """
        return self._parms.get("fold_column")

    @fold_column.setter
    def fold_column(self, fold_column):
        assert_is_type(fold_column, None, str)
        self._parms["fold_column"] = fold_column


    @property
    def target_column(self):
        """
        Target column for the encoding

        Type: ``str``.
        """
        return self._parms.get("target_column")

    @target_column.setter
    def target_column(self, target_column):
        assert_is_type(target_column, None, str)
        self._parms["target_column"] = target_column


    @property
    def blending_parameters(self):
        """
        Parameters used for blending (if enabled). Blending is to be enabled separaterly using the 'blending' parameter.

        Type: ``BlendingParams``.
        """
        return self._parms.get("blending_parameters")

    @blending_parameters.setter
    def blending_parameters(self, blending_parameters):
        assert_is_type(blending_parameters, None, BlendingParams)
        self._parms["blending_parameters"] = blending_parameters


